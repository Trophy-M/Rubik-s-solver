from solver import *
from cube import *
from varstore import *
from movelibrary import *
from interface import *
import time
import pandas
import numpy as np
def checkRepeats(moves):
    prev = 'k'
    isRepeated = False
    while len(moves) > 0 and isRepeated == False:
        if prev[0] == moves[0][0]:
            isRepeated = True
        
        
        prev = moves.pop(0)
    
    return isRepeated
def generatedb(firststate, standardmoves):
    qmoves = []
    for items in standardmoves: qmoves.append([items])
    depth, i = 6, -1
    starttime = time.time()
    reducedmoves = pandas.DataFrame()
    movedata = {}
    print('generating...')
    while len(qmoves) > 0:
        i += 1
        vstart = qmoves.pop(0)
        for items in standardmoves:
            '''if checkRepeats(vstart + [items]) == False:
                qmoves.append(vstart + [items])'''
            qmoves.append(vstart + [items])
        tempcube = cube(uface,lface,fface,rface,bface,dface)
        tempcube.cubereset()
        movedata[i] = {'vertex': tempcube.cu, 'moves': vstart, 'neighbors': ''}
        maketurns(tempcube, vstart)
        movedata[i]['neighbors'] = tempcube.cu
        print('running', movedata[i]['moves'], 'at', 976338-i, tempcube.cu)
        if len(qmoves[-1]) > depth:
            endtime = time.time()
            print(endtime-starttime)
            break
    return movedata

movedata = generatedb(solved, standardmoves)
reducedmoves = pandas.DataFrame.from_dict(movedata, 'index')
reducedmoves.to_csv('C:/Users/asawi/Documents/Rubiks Solver/Rubik-s-solver/reducedmoves.csv')
